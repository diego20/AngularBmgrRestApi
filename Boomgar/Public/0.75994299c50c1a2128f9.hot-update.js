webpackHotUpdate(0,{10:function(module,exports){eval("function MainController($scope, $log, $location, $state, baseService) {\n\n    $scope.send = function () {\n        $scope.results = {};\n        $scope.parametersArray = [];\n        if($scope.currentCredentialType === 'credentialList'){\n            var array = Object.keys($scope.credentialListParameters);\n            for(var i = 0; i < Object.keys($scope.credentialListParameters).length; i ++){\n                $scope.parametersArray[i] = {\n                    'Name': array[i],\n                    'Value':$scope.credentialListParameters[array[i]]\n                };\n            }\n        }\n        else if($scope.currentCredentialType !== 'credentialList'){\n            var array = Object.keys($scope.credentialsIdParameters);\n            for(var i = 0; i < Object.keys($scope.credentialsIdParameters).length; i ++){\n                $scope.parametersArray[i] = {\n                    'Name': array[i],\n                    'Value':$scope.credentialsIdParameters[array[i]]\n                };\n            }\n        }\n        var headers = {'AuthorizationInformation':$scope.authorizationInformation};\n        //https://localhost:44325/api/Credential/\n        //https://52.7.15.19/BomgarVaultWebAPI/api/Credential/\n        //https://localhost/BomgarVaultWebAPI/api/Credential/\n        $scope.url = baseService.setParams($scope.parametersArray, 'https://localhost/BomgarVaultWebAPI/api/Credential/','');\n        baseService.getResource($scope.url,headers,\n            function(success){\n                $scope.results = success;\n                console.log($scope.results);\n            },\n            function(error){\n                if(error != null){\n                    $scope.results = error.Message;\n                    console.error(error);\n                }\n        });\n        $scope.hideResults = false;\n    };\n\n\n    $scope.clearContent = function(){\n        $scope.authorizationInformation = '';\n        $scope.securityScheme = '';\n        if($scope.currentCredentialType === 'credentialList'){\n            var array = Object.keys($scope.credentialListParameters);\n            for(var i = 0; i < Object.keys($scope.credentialListParameters).length; i ++){\n                $scope.credentialListParameters[array[i]] = '';\n            }\n        }\n        else if($scope.currentCredentialType !== 'credentialList'){\n            var array = Object.keys($scope.credentialsIdParameters);\n            for(var i = 0; i < Object.keys($scope.credentialsIdParameters).length; i ++){\n                $scope.credentialsIdParameters[array[i]] = '';\n            }\n        }\n    }\n\n    $scope.changeCredentialType = function(credentialType){\n        if(credentialType !== $scope.currentCredentialType){\n            $scope.currentCredentialType = credentialType;\n            $scope.results = {};\n            $scope.hideResults = true;\n            $scope.selectedParameter = '';\n            $scope.parameterContent = '';\n            $scope.parameterContent2 = '';\n            credentialType === 'credentialPost' ? $scope.headerRestType = 'POST' : $scope.headerRestType = 'GET';\n        }\n    }\n\n    $scope.selectParameter = function(parameter){\n        $scope.selectedParameter = parameter;\n        $scope.parameterContent2 = '';\n        if(parameter === 'Security scheme'){\n            $scope.parameterContent = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam fermentum odio vitae nibh volutpat scelerisque. Sed augue metus, varius in maximus at, vestibulum vitae felis.';\n            $scope.parameterContent2 = 'Integer purus leo, egestas id diam sit amet, pulvinar maximus purus. In lacinia est fermentum dui pharetra, id venenatis nibh congue. Nunc venenatis sit amet mauris a ornare. Curabitur tincidunt sit amet ligula quis tempor.';\n        }else if(parameter === 'Authorization Information'){\n            $scope.parameterContent = 'Aenean placerat dignissim tellus at tempor. Suspendisse potenti. Mauris rutrum euismod sem sit amet egestas. Maecenas hendrerit augue lorem, sit amet scelerisque lectus facilisis vel. Phasellus at lacinia justo. Nullam lacus risus, tristique quis neque sed, consequat gravida urna. Nunc congue volutpat dignissim.';\n        }else{\n            $scope.parameterContent = 'Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. In nec felis gravida nunc sodales porta ut non nisi. Curabitur ac sapien diam. In hac habitasse platea dictumst. Fusce semper, magna sit amet blandit pretium, tortor sem commodo dolor, nec elementum turpis risus non nisi.';\n        }\n    }\n\n    $scope.initVariables = function(){\n        $scope.securityScheme = '';\n        $scope.authorizationInformation = 'Th1s1sAK3y*';\n\n        $scope.credentialListParameters = {};\n        $scope.credentialsIdParameters = {};\n\n        $scope.credentialListParameters.loginUserName = '';\n        $scope.credentialListParameters.loginAuthorizationMethodConfiguration = '';\n        $scope.credentialListParameters.IPV4 = '';\n        $scope.credentialListParameters.credentialType = '';\n        $scope.credentialListParameters.domain = '';\n        $scope.credentialListParameters.hostname = '';\n\n        $scope.credentialsIdParameters.loginUserName = '';\n        $scope.credentialsIdParameters.loginAuthorizationMethodConfiguration = '';\n        $scope.credentialsIdParameters.CredentialId = '';\n\n        $scope.url = '';\n        $scope.results = '';\n        $scope.hideResults = true;\n    }\n\n    var init = function () {\n        $scope.currentCredentialType = 'credentialList';\n        $scope.headerRestType = 'GET';\n        $scope.selectedParameter = '';\n        $scope.parameterContent = '';\n        $scope.parameterContent2 = '';\n        $scope.initVariables();\n    }\n    init();\n\n};\n\nMainController.$inject = ['$scope', '$log', '$location', '$state', 'baseService'];\nmodule.exports = MainController;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")}});
